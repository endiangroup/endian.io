$colour-white:  #ffffff;
$colour-grey:   #29353a;
$colour-marine: #46565f;
$colour-red:    #df1f1b;
$colour-orange: #ea7d1a;
$colour-yellow: #ffcd03;
$colour-green:  #81b725;
$colour-olive:  #079239;
$colour-blue:   #3f95d1;
$colour-black:  #0c1516;

$colour-shade-amount: 5.5%;
$colour-trans-amount: 0.5;

$colours: (
  white: (
	base: $colour-white,
    dark: darken($colour-white, 1%),
    trans: transparentize($colour-white, $colour-trans-amount),
  ),
  grey: (
    base: $colour-grey,
    light: lighten($colour-grey, $colour-shade-amount),
    dark: darken($colour-grey, $colour-shade-amount),
    trans: transparentize($colour-grey, $colour-trans-amount),
  ),
  marine: (
    base: $colour-marine,
    light: lighten($colour-marine, $colour-shade-amount),
    dark: darken($colour-marine, $colour-shade-amount),
    trans: transparentize($colour-marine, $colour-trans-amount),
  ),
  red: (
    base: $colour-red,
    light: lighten($colour-red, $colour-shade-amount),
    dark: darken($colour-red, $colour-shade-amount),
    trans: transparentize($colour-red, $colour-trans-amount),
  ),
  orange: (
    base: $colour-orange,
    light: lighten($colour-orange, $colour-shade-amount),
    dark: darken($colour-orange, $colour-shade-amount),
    trans: transparentize($colour-orange, $colour-trans-amount),
  ),
  yellow: (
    base: $colour-yellow,
    light: lighten($colour-yellow, $colour-shade-amount),
    dark: darken($colour-yellow, $colour-shade-amount),
    trans: transparentize($colour-yellow, $colour-trans-amount),
  ),
  green: (
    base: $colour-green,
    light: lighten($colour-green, $colour-shade-amount),
    dark: darken($colour-green, $colour-shade-amount),
    trans: transparentize($colour-green, $colour-trans-amount),
  ),
  olive: (
    base: $colour-olive,
    light: lighten($colour-olive, $colour-shade-amount),
    dark: darken($colour-olive, $colour-shade-amount),
    trans: transparentize($colour-olive, $colour-trans-amount),
  ),
  blue: (
    base: $colour-blue,
    light: lighten($colour-blue, $colour-shade-amount),
    dark: darken($colour-blue, $colour-shade-amount),
    trans: transparentize($colour-blue, $colour-trans-amount),
  ),
);

@function colour($name, $tone: 'base') {
    @return map-get(map-get($colours, $name), $tone);
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

@mixin colourshiftkeyframes($element, $name) {
    @include keyframes($name) {
        0% { #{$element}: colour(red) !important; }
        20% { #{$element}: colour(orange); }
        40% { #{$element}: colour(yellow); }
        60% { #{$element}: colour(green); }
        80% { #{$element}: colour(olive); }
        100% { #{$element}: colour(blue); }
    }
}

@include colourshiftkeyframes(color,colour_shift);
@include colourshiftkeyframes(background-color,background_colour_shift);
@include colourshiftkeyframes(border-color,border_colour_shift);

@mixin colour-highlight-shift {
    @include animation('colour_shift 5s infinite alternate');
}

@mixin background-colour-highlight-shift {
    @include animation('background_colour_shift 5s infinite alternate');
}

@mixin border-colour-highlight-shift {
    @include animation('border_colour_shift 5s infinite alternate');
}

@mixin border-and-colour-highlight-shift {
    @include animation('border_colour_shift 5s infinite alternate,colour_shift 5s infinite alternate');
}

/*
This can be used to create a rainbow effect in a set of nested elements.

For example, it can be used to animate the anchors in a list

```
li
    a
li
    a
```

using

`@import element-colour-offset-shift(li,a);`

The $start param is an option starting index, so that some elements can be
skipped.
*/

@mixin element-colour-offset-shift($container, $element:a, $start:0) {

    #{$element} {
        @include colour-highlight-shift;
    }

    @each $index, $offset in (
                                1: 0,
                                2: -0.132s,
                                3: -0.264s,
                                4: -0.396s,
                                5: -0.528s,
                                6: -0.66s,
                             ) {
        #{$container}:nth-of-type(#{$index + $start}) {
            #{$element} {
                animation-delay: $offset;
            }
        }
    }
}
